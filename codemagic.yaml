workflows:
  ionic-cordova-android-workflow:
    name: MyApp Workflow
    max_build_duration: 120
    instance_type: mac_mini
    environment:
      groups:
      # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
        - keystore_credentials # <-- (Includes FCI_KEYSTORE, FCI_KEYSTORE_PASSWORD, FCI_KEY_PASSWORD, FCI_KEY_ALIAS)
            CM_KEYSTORE: MyApp.jks #<-- Put your keystore file here
            CM_KEYSTORE_PASSWORD: MyAppTest #<-- Put your keystore password here
            CM_KEY_ALIAS_PASSWORD: MyAppTest #<-- Put your keystore alias password here
            CM_KEY_ALIAS_USERNAME: MyApp #<-- Put your keystore alias username here
        - google_play # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS)
        - other
      vars:
        FCI_KEYSTORE_PATH: /tmp/keystore.keystore
      node: latest
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: develop
          include: true
          source: true
    scripts:
      - name: Install npm dependencies for Ionic Cordova project and update to Cordova version 9
        script: |
          npm ci # equivalent of npm install for CI systems. Requires package-lock.json or npm-shrinkwrap.json to be present
          cvm install 9.0.0
          cvm use 9.0.0          
      - name: Setup Cordova Android platform
        script: |
          ionic cordova platform remove android --nosave
          ionic cordova platform add android --confirm --no-interactive --noresources          
      - name: Build Android Cordova App
        script: ionic cordova build android --release --no-interactive --prod --device
      - name: Sign APK
        script: |
          echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
          APK_PATH=$(find platforms/android/app/build/outputs/apk/release -name "*.apk" | head -1)
          jarsigner \
            -sigalg SHA1withRSA \
            -digestalg SHA1 \
            -keystore $FCI_KEYSTORE_PATH \
            -storepass $FCI_KEYSTORE_PASSWORD \
            -keypass $FCI_KEY_PASSWORD \
            $APK_PATH $FCI_KEY_ALIAS          
    artifacts:
      - platforms/android/app/build/outputs/**/*.apk
    # publishing:
    #   google_play:
    #     credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
    #     track: internal # <-- Any default or custom track that is not in ‘draft’ status
    #   email:
    #     recipients:
    #       - user_one@example.com
    #       - user_two@example.com
    #     notify:
    #       success: true     # To not receive a notification when a build succeeds
    #       failure: false     # To not receive a notification when a build fails


# iOS Ionic Cordova workflow example
# The following example shows a workflow that can be used to publish your Ionic Cordova iOS app to App Store Connect.

workflows:
  ionic-cordova-ios-workflow:
    name: MyApp Workflow
    max_build_duration: 120
    instance_type: mac_mini
    environment:
      groups:
      # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
        # - manual_code_signing # <-- (Includes FCI_CERTIFICATE, FCI_CERTIFICATE_PASSWORD, FCI_PROVISIONING_PROFILE)
        # Automatic Code Signing
        # https://appstoreconnect.apple.com/access/api
        - app_store_credentials # <-- (Includes APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY)
          APP_STORE_CONNECT_ISSUER_ID: test  #<-- Put your App Store Connect Issuer Id here 
          APP_STORE_CONNECT_KEY_IDENTIFIER: test  #<-- Put your App Store Connect Key Identifier here 
          APP_STORE_CONNECT_PRIVATE_KEY: test  #<-- Put your App Store Connect Private Key here
        - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY)
        - other
      vars:
        XCODE_WORKSPACE: "ios/App/MyApp.xcworkspace" # <-- Put the name of your Xcode workspace here
        XCODE_SCHEME: "MyApp" # <-- Put the name of your Xcode scheme here        
        BUNDLE_ID: "io.ionic.starter" # <-- Put your Bundle Id here
      node: latest
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: develop
          include: true
          source: true
    scripts:
      - name: Install npm dependencies for Ionic Cordova project and update to Cordova version 9
        script: |
          npm ci # equivalent of npm install for CI systems. Requires package-lock.json or npm-shrinkwrap.json to be present
          cvm install 9.0.0
          cvm use 9.0.0          
      - name: Setup Cordova iOS platform
          script: |
            ionic cordova platform remove ios --nosave
            ionic cordova platform add ios --confirm --no-interactive --noresources            
      - name: Cocoapods installation
        script: |
                    cd platforms/ios && pod install
      - name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command
        script: |
                    keychain initialize
      # - name: Set up Provisioning profiles from environment variables (Use with manual code signing)
      #   script: |
      #     PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
      #     mkdir -p "$PROFILES_HOME"
      #     PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
      #     echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
      #     echo "Saved provisioning profile $PROFILE_PATH"
      - name: Fetch signing files
        script: |
          # app-store-connect fetch-signing-files "com.nevercode.ncionicapp" --type IOS_APP_STORE --create
          app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) --type IOS_APP_STORE --create          
      - name: Add certificates to keychain
        script: |
                    keychain add-certificates
      - name: Increment build number
        script: |
          #!/bin/sh
          set -e
          set -x
          cd $FCI_BUILD_DIR/platforms/ios
          agvtool new-version -all $(($BUILD_NUMBER +1))          
      - name: Set up code signing settings on Xcode project
        script: |
                    xcode-project use-profiles
      - name: Build ipa for distribution
        script: |
                    xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # publishing:
    #   app_store_connect:
    #       api_key: $APP_STORE_CONNECT_PRIVATE_KEY      # Contents of the API key
    #       key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER    # Alphanumeric value that identifies the API key
    #       issuer_id: $APP_STORE_CONNECT_ISSUER_ID      # Alphanumeric value that identifies who created the API key
    #       submit_to_testflight: true        # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight to automatically enroll your build to beta testers. 
    #   email:
    #     recipients:
    #       - user_one@example.com
    #       - user_two@example.com
    #     notify:
    #       success: false     # To not receive a notification when a build succeeds
    #       failure: false     # To not receive a notification when a build fails





 